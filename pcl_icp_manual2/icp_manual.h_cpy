#ifndef __ICP_MANUAL_H
#define __ICP_MANUAL_H

#include <pcl/registration/icp.h>    
#include <pcl/kdtree/kdtree_flann.h>
#include <pcl/point_types.h>

#include <Eigen/Dense>

#include "so3.h"

#include <chrono>

namespace test
{

template<typename T>
class Point2PointICP
{
public:
	using ValueType = T;
	using CloudTypePtr = typename pcl::PointCloud<pcl::PointXYZ>::Ptr;
	using CloudType = typename pcl::PointCloud<pcl::PointXYZ>;

	using TransformationType = typename Eigen::Matrix<ValueType, 4, 4>;
        using RotationType = typename Eigen::Matrix<ValueType, 3, 3>;
        using TranslationType = typename Eigen::Matrix<ValueType, 3, 1>;

	void scanMatch( const CloudTypePtr& first_cloud, 
			const CloudType& second_cloud,
		        TransformationType& transform,
			const int max_iterations )
	{
		int iter = 0;

		kdtree_ptr_.setInputCloud( first_cloud );

		while( iter < max_iterations ) {
			mse_ = 0;
			auto t1 = std::chrono::steady_clock::now();

			CloudType transformed_cloud;
			pcl::transformPointCloud( second_cloud, transformed_cloud, transform );

			for ( size_t i = 0; i < transformed_cloud.points.size(); i ++ ) {
				auto transformed_point = transformed_cloud.points[i];

				std::vector<int> indices(1);
            			std::vector<ValueType> distances(1);
				
				kdtree_ptr_.nearestKSearch( transformed_point, 1, indices, distances );

				auto original_point = second_cloud.points[i];
				auto nearest_point = kdtree_ptr_.getInputCloud()->points[indices[0]];
				mse_ += distances[0];

				if( distances[0] > 1 ) continue;

				Eigen::Vector3f source_pt(original_point.x, original_point.y, original_point.z);
				Eigen::Vector3f transformed_pt(transformed_point.x, transformed_point.y, transformed_point.z);
				Eigen::Vector3f target_pt(nearest_point.x, nearest_point.y, nearest_point.z);
				Eigen::Matrix<ValueType, 3, 6> jacobian = Eigen::Matrix<ValueType, 3, 6>::Zero();
				jacobian.template block<3, 3>(0, 0) = -transform.template block<3, 3>(0, 0) * slam::SO3::hat(source_pt);
            			jacobian.template block<3, 3>(0, 3) = Eigen::Matrix<ValueType, 3, 3>::Identity();
				Eigen::Matrix<ValueType, 3, 1> resiual = transformed_pt - target_pt;

				Hessian_ +=  jacobian.transpose() * jacobian;
			       	B_ +=  -jacobian.transpose() * resiual;	
			}

			mse_ /= static_cast<ValueType>( transformed_cloud.points.size() );

			if (Hessian_.determinant() == 0) { 
				continue;
			}

			Eigen::Matrix<ValueType, 6, 1> delta_x = Hessian_.householderQr().solve(B_);

			Eigen::Matrix<ValueType, 3, 1> tmp = delta_x.template block<3, 1>(0, 0);
			transform.template block<3, 3>(0, 0) *= slam::SO3::exp( tmp );
        		transform.template block<3, 1>(0, 3) += delta_x.template block<3, 1>(3, 0);

			iter ++;

			auto t2 = std::chrono::steady_clock::now();
                        double dr_ms = std::chrono::duration<double,std::milli>(t2-t1).count();

			std::cout<<"duration : "<<dr_ms<<" ms, mse = "<<mse_<<std::endl;
		}
	}

	/*void scanMatchSVD( const CloudTypePtr& first_cloud,
                        const CloudType& second_cloud,
                        TransformationType& transform,
                        const int max_iterations )
        {
                int iter = 0;

                kdtree_ptr_.setInputCloud( first_cloud );

                while( iter < max_iterations ) {
			CloudType transformed_cloud;
                        pcl::transformPointCloud( second_cloud, transformed_cloud, transform );

			std::vector<ValueType> source_points_xyz;
        		std::vector<ValueType> target_points_xyz;



			iter ++;
		}
	}*/

private:
	pcl::KdTreeFLANN<pcl::PointXYZ>  kdtree_ptr_;

	Eigen::Matrix<ValueType, 6, 6> Hessian_ = Eigen::Matrix<ValueType, 6, 6>::Zero();
        Eigen::Matrix<ValueType, 6, 1> B_ = Eigen::Matrix<ValueType, 6, 1>::Zero();

        RotationType rotation_matrix_ = RotationType::Zero();
        TranslationType translation_ = TranslationType::Zero();

	ValueType mse_ = 0;
};

}

#endif


